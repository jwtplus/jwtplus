// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type AppKeysIsExpired string

const (
	AppKeysIsExpiredYes AppKeysIsExpired = "yes"
	AppKeysIsExpiredNo  AppKeysIsExpired = "no"
)

func (e *AppKeysIsExpired) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AppKeysIsExpired(s)
	case string:
		*e = AppKeysIsExpired(s)
	default:
		return fmt.Errorf("unsupported scan type for AppKeysIsExpired: %T", src)
	}
	return nil
}

type NullAppKeysIsExpired struct {
	AppKeysIsExpired AppKeysIsExpired `json:"app_keys_is_expired"`
	Valid            bool             `json:"valid"` // Valid is true if AppKeysIsExpired is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAppKeysIsExpired) Scan(value interface{}) error {
	if value == nil {
		ns.AppKeysIsExpired, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AppKeysIsExpired.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAppKeysIsExpired) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AppKeysIsExpired), nil
}

type AppKeysIsRevoked string

const (
	AppKeysIsRevokedYes AppKeysIsRevoked = "yes"
	AppKeysIsRevokedNo  AppKeysIsRevoked = "no"
)

func (e *AppKeysIsRevoked) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AppKeysIsRevoked(s)
	case string:
		*e = AppKeysIsRevoked(s)
	default:
		return fmt.Errorf("unsupported scan type for AppKeysIsRevoked: %T", src)
	}
	return nil
}

type NullAppKeysIsRevoked struct {
	AppKeysIsRevoked AppKeysIsRevoked `json:"app_keys_is_revoked"`
	Valid            bool             `json:"valid"` // Valid is true if AppKeysIsRevoked is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAppKeysIsRevoked) Scan(value interface{}) error {
	if value == nil {
		ns.AppKeysIsRevoked, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AppKeysIsRevoked.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAppKeysIsRevoked) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AppKeysIsRevoked), nil
}

type AppKeysKeyAlgo string

const (
	AppKeysKeyAlgoRS256 AppKeysKeyAlgo = "RS256"
	AppKeysKeyAlgoRS384 AppKeysKeyAlgo = "RS384"
	AppKeysKeyAlgoRS512 AppKeysKeyAlgo = "RS512"
	AppKeysKeyAlgoES256 AppKeysKeyAlgo = "ES256"
	AppKeysKeyAlgoES384 AppKeysKeyAlgo = "ES384"
	AppKeysKeyAlgoES512 AppKeysKeyAlgo = "ES512"
	AppKeysKeyAlgoPS256 AppKeysKeyAlgo = "PS256"
	AppKeysKeyAlgoPS384 AppKeysKeyAlgo = "PS384"
	AppKeysKeyAlgoPS512 AppKeysKeyAlgo = "PS512"
)

func (e *AppKeysKeyAlgo) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AppKeysKeyAlgo(s)
	case string:
		*e = AppKeysKeyAlgo(s)
	default:
		return fmt.Errorf("unsupported scan type for AppKeysKeyAlgo: %T", src)
	}
	return nil
}

type NullAppKeysKeyAlgo struct {
	AppKeysKeyAlgo AppKeysKeyAlgo `json:"app_keys_key_algo"`
	Valid          bool           `json:"valid"` // Valid is true if AppKeysKeyAlgo is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAppKeysKeyAlgo) Scan(value interface{}) error {
	if value == nil {
		ns.AppKeysKeyAlgo, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AppKeysKeyAlgo.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAppKeysKeyAlgo) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AppKeysKeyAlgo), nil
}

type AppKeysKeyType string

const (
	AppKeysKeyTypeRSA   AppKeysKeyType = "RSA"
	AppKeysKeyTypeECDSA AppKeysKeyType = "ECDSA"
)

func (e *AppKeysKeyType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AppKeysKeyType(s)
	case string:
		*e = AppKeysKeyType(s)
	default:
		return fmt.Errorf("unsupported scan type for AppKeysKeyType: %T", src)
	}
	return nil
}

type NullAppKeysKeyType struct {
	AppKeysKeyType AppKeysKeyType `json:"app_keys_key_type"`
	Valid          bool           `json:"valid"` // Valid is true if AppKeysKeyType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAppKeysKeyType) Scan(value interface{}) error {
	if value == nil {
		ns.AppKeysKeyType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AppKeysKeyType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAppKeysKeyType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AppKeysKeyType), nil
}

type AppsAlgo string

const (
	AppsAlgoRS256 AppsAlgo = "RS256"
	AppsAlgoRS384 AppsAlgo = "RS384"
	AppsAlgoRS512 AppsAlgo = "RS512"
	AppsAlgoES256 AppsAlgo = "ES256"
	AppsAlgoES384 AppsAlgo = "ES384"
	AppsAlgoES512 AppsAlgo = "ES512"
	AppsAlgoPS256 AppsAlgo = "PS256"
	AppsAlgoPS384 AppsAlgo = "PS384"
	AppsAlgoPS512 AppsAlgo = "PS512"
)

func (e *AppsAlgo) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AppsAlgo(s)
	case string:
		*e = AppsAlgo(s)
	default:
		return fmt.Errorf("unsupported scan type for AppsAlgo: %T", src)
	}
	return nil
}

type NullAppsAlgo struct {
	AppsAlgo AppsAlgo `json:"apps_algo"`
	Valid    bool     `json:"valid"` // Valid is true if AppsAlgo is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAppsAlgo) Scan(value interface{}) error {
	if value == nil {
		ns.AppsAlgo, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AppsAlgo.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAppsAlgo) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AppsAlgo), nil
}

type AppsKeyType string

const (
	AppsKeyTypeRSA   AppsKeyType = "RSA"
	AppsKeyTypeECDSA AppsKeyType = "ECDSA"
)

func (e *AppsKeyType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AppsKeyType(s)
	case string:
		*e = AppsKeyType(s)
	default:
		return fmt.Errorf("unsupported scan type for AppsKeyType: %T", src)
	}
	return nil
}

type NullAppsKeyType struct {
	AppsKeyType AppsKeyType `json:"apps_key_type"`
	Valid       bool        `json:"valid"` // Valid is true if AppsKeyType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAppsKeyType) Scan(value interface{}) error {
	if value == nil {
		ns.AppsKeyType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AppsKeyType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAppsKeyType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AppsKeyType), nil
}

type App struct {
	AppID          string         `json:"app_id"`
	AppName        string         `json:"app_name"`
	AppDescription sql.NullString `json:"app_description"`
	AppKey         string         `json:"app_key"`
	TokenExpiry    int32          `json:"token_expiry"`
	TokenNbf       int32          `json:"token_nbf"`
	RefreshExpiry  int32          `json:"refresh_expiry"`
	RefreshNbf     int32          `json:"refresh_nbf"`
	KeyType        AppsKeyType    `json:"key_type"`
	Algo           AppsAlgo       `json:"algo"`
	RotationPeriod int64          `json:"rotation_period"`
	AddTime        int64          `json:"add_time"`
	UpdateTime     sql.NullInt64  `json:"update_time"`
	LastRotateTime sql.NullInt64  `json:"last_rotate_time"`
}

type AppKey struct {
	KeyID      string           `json:"key_id"`
	AppID      string           `json:"app_id"`
	PublicKey  string           `json:"public_key"`
	PrivateKey string           `json:"private_key"`
	KeyType    AppKeysKeyType   `json:"key_type"`
	KeyAlgo    AppKeysKeyAlgo   `json:"key_algo"`
	AddTime    int64            `json:"add_time"`
	ExpTime    int64            `json:"exp_time"`
	IsRevoked  AppKeysIsRevoked `json:"is_revoked"`
	IsExpired  AppKeysIsExpired `json:"is_expired"`
}

type Setting struct {
	SettingKey   string `json:"setting_key"`
	SettingValue string `json:"setting_value"`
}

type Token struct {
	TokenID          string `json:"token_id"`
	AppsID           string `json:"apps_id"`
	KeyID            string `json:"key_id"`
	Sub              string `json:"sub"`
	AuthToken        string `json:"auth_token"`
	AuthTokenHash    string `json:"auth_token_hash"`
	AuthTokenIat     int64  `json:"auth_token_iat"`
	AuthTokenNbf     int64  `json:"auth_token_nbf"`
	AuthTokenExp     int64  `json:"auth_token_exp"`
	RefreshToken     string `json:"refresh_token"`
	RefreshTokenHash string `json:"refresh_token_hash"`
	RefreshTokenIat  int64  `json:"refresh_token_iat"`
	RefreshTokenNbf  int64  `json:"refresh_token_nbf"`
	RefreshTokenExp  int64  `json:"refresh_token_exp"`
	IpAddress        string `json:"ip_address"`
	UserAgent        string `json:"user_agent"`
}
