// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: app_keys.sql

package db

import (
	"context"
	"database/sql"
)

const expireActiveKey = `-- name: ExpireActiveKey :exec
UPDATE app_keys SET is_expired = ?
WHERE app_id = ? AND is_expired = 'no' AND is_revoked = 'no'
`

type ExpireActiveKeyParams struct {
	IsExpired AppKeysIsExpired `json:"is_expired"`
	AppID     string           `json:"app_id"`
}

func (q *Queries) ExpireActiveKey(ctx context.Context, arg ExpireActiveKeyParams) error {
	_, err := q.db.ExecContext(ctx, expireActiveKey, arg.IsExpired, arg.AppID)
	return err
}

const expireActiveKeyById = `-- name: ExpireActiveKeyById :exec
UPDATE app_keys SET is_expired = ?
WHERE app_id = ? AND key_id = ? LIMIT 1
`

type ExpireActiveKeyByIdParams struct {
	IsExpired AppKeysIsExpired `json:"is_expired"`
	AppID     string           `json:"app_id"`
	KeyID     string           `json:"key_id"`
}

func (q *Queries) ExpireActiveKeyById(ctx context.Context, arg ExpireActiveKeyByIdParams) error {
	_, err := q.db.ExecContext(ctx, expireActiveKeyById, arg.IsExpired, arg.AppID, arg.KeyID)
	return err
}

const getAppKeyReadyForRotation = `-- name: GetAppKeyReadyForRotation :many
SELECT a.key_id, a.app_id, b.key_type, b.algo, b.rotation_period FROM app_keys as a 
LEFT JOIN apps as b on a.app_id = b.app_id
WHERE a.is_expired = "no" AND a.is_revoked = "no" AND a.exp_time < ?
`

type GetAppKeyReadyForRotationRow struct {
	KeyID          string          `json:"key_id"`
	AppID          string          `json:"app_id"`
	KeyType        NullAppsKeyType `json:"key_type"`
	Algo           NullAppsAlgo    `json:"algo"`
	RotationPeriod sql.NullInt64   `json:"rotation_period"`
}

func (q *Queries) GetAppKeyReadyForRotation(ctx context.Context, expTime int64) ([]GetAppKeyReadyForRotationRow, error) {
	rows, err := q.db.QueryContext(ctx, getAppKeyReadyForRotation, expTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAppKeyReadyForRotationRow
	for rows.Next() {
		var i GetAppKeyReadyForRotationRow
		if err := rows.Scan(
			&i.KeyID,
			&i.AppID,
			&i.KeyType,
			&i.Algo,
			&i.RotationPeriod,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublicKeysByAppId = `-- name: GetPublicKeysByAppId :many
SELECT key_id, public_key, key_type, key_algo, exp_time, is_expired, is_revoked
FROM app_keys
WHERE app_id = ?
`

type GetPublicKeysByAppIdRow struct {
	KeyID     string           `json:"key_id"`
	PublicKey string           `json:"public_key"`
	KeyType   AppKeysKeyType   `json:"key_type"`
	KeyAlgo   AppKeysKeyAlgo   `json:"key_algo"`
	ExpTime   int64            `json:"exp_time"`
	IsExpired AppKeysIsExpired `json:"is_expired"`
	IsRevoked AppKeysIsRevoked `json:"is_revoked"`
}

func (q *Queries) GetPublicKeysByAppId(ctx context.Context, appID string) ([]GetPublicKeysByAppIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getPublicKeysByAppId, appID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPublicKeysByAppIdRow
	for rows.Next() {
		var i GetPublicKeysByAppIdRow
		if err := rows.Scan(
			&i.KeyID,
			&i.PublicKey,
			&i.KeyType,
			&i.KeyAlgo,
			&i.ExpTime,
			&i.IsExpired,
			&i.IsRevoked,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertKey = `-- name: InsertKey :exec
INSERT INTO app_keys (key_id, app_id, public_key, private_key, key_type, key_algo, exp_time, add_time)
VALUES (?,?,?,?,?,?,?,?)
`

type InsertKeyParams struct {
	KeyID      string         `json:"key_id"`
	AppID      string         `json:"app_id"`
	PublicKey  string         `json:"public_key"`
	PrivateKey string         `json:"private_key"`
	KeyType    AppKeysKeyType `json:"key_type"`
	KeyAlgo    AppKeysKeyAlgo `json:"key_algo"`
	ExpTime    int64          `json:"exp_time"`
	AddTime    int64          `json:"add_time"`
}

func (q *Queries) InsertKey(ctx context.Context, arg InsertKeyParams) error {
	_, err := q.db.ExecContext(ctx, insertKey,
		arg.KeyID,
		arg.AppID,
		arg.PublicKey,
		arg.PrivateKey,
		arg.KeyType,
		arg.KeyAlgo,
		arg.ExpTime,
		arg.AddTime,
	)
	return err
}

const revokeKeyById = `-- name: RevokeKeyById :exec
UPDATE app_keys SET is_revoked = ? WHERE app_id = ? AND key_id = ? LIMIT 1
`

type RevokeKeyByIdParams struct {
	IsRevoked AppKeysIsRevoked `json:"is_revoked"`
	AppID     string           `json:"app_id"`
	KeyID     string           `json:"key_id"`
}

func (q *Queries) RevokeKeyById(ctx context.Context, arg RevokeKeyByIdParams) error {
	_, err := q.db.ExecContext(ctx, revokeKeyById, arg.IsRevoked, arg.AppID, arg.KeyID)
	return err
}
