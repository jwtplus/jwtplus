// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: settings.sql

package db

import (
	"context"
)

const countSettingByKey = `-- name: CountSettingByKey :one
SELECT COUNT(*) AS count 
FROM settings 
WHERE setting_key = ?
`

func (q *Queries) CountSettingByKey(ctx context.Context, settingKey string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countSettingByKey, settingKey)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSettingByKeyAndValue = `-- name: CountSettingByKeyAndValue :one
SELECT COUNT(*) AS count 
FROM settings 
WHERE setting_key = ? AND
setting_value = ?
`

type CountSettingByKeyAndValueParams struct {
	SettingKey   string `json:"setting_key"`
	SettingValue string `json:"setting_value"`
}

func (q *Queries) CountSettingByKeyAndValue(ctx context.Context, arg CountSettingByKeyAndValueParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countSettingByKeyAndValue, arg.SettingKey, arg.SettingValue)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteSettingByKey = `-- name: DeleteSettingByKey :exec
DELETE FROM settings WHERE setting_key = ? LIMIT 1
`

func (q *Queries) DeleteSettingByKey(ctx context.Context, settingKey string) error {
	_, err := q.db.ExecContext(ctx, deleteSettingByKey, settingKey)
	return err
}

const getSettingByKey = `-- name: GetSettingByKey :one
SELECT setting_value
FROM settings
WHERE setting_key = ?
LIMIT 1
`

func (q *Queries) GetSettingByKey(ctx context.Context, settingKey string) (string, error) {
	row := q.db.QueryRowContext(ctx, getSettingByKey, settingKey)
	var setting_value string
	err := row.Scan(&setting_value)
	return setting_value, err
}

const insertSetting = `-- name: InsertSetting :exec
INSERT INTO settings (setting_key, setting_value) 
VALUES (?, ?)
`

type InsertSettingParams struct {
	SettingKey   string `json:"setting_key"`
	SettingValue string `json:"setting_value"`
}

func (q *Queries) InsertSetting(ctx context.Context, arg InsertSettingParams) error {
	_, err := q.db.ExecContext(ctx, insertSetting, arg.SettingKey, arg.SettingValue)
	return err
}

const updateSettingByKey = `-- name: UpdateSettingByKey :exec
UPDATE settings 
SET setting_value = ? 
WHERE setting_key = ?
LIMIT 1
`

type UpdateSettingByKeyParams struct {
	SettingValue string `json:"setting_value"`
	SettingKey   string `json:"setting_key"`
}

func (q *Queries) UpdateSettingByKey(ctx context.Context, arg UpdateSettingByKeyParams) error {
	_, err := q.db.ExecContext(ctx, updateSettingByKey, arg.SettingValue, arg.SettingKey)
	return err
}
